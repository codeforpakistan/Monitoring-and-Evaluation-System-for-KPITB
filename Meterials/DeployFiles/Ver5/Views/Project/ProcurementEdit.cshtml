@model ModelLayer.MainViewModel.EditProcurementVM
@{
    ViewBag.Title = "Edit Procurement";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<div class="row">
    <div class="col-xl-12">
        <!-- START card-->
        <div class="card card-default">
            <div class="card-header">
                <div class="card-title">Edit Procurement</div>
            </div>
            <div class="card-body">
                <div class="form-group">
                    @using (Html.BeginForm("ProcurementEdit", "Project", FormMethod.Post, new { @class = "form-horizontal" }))
                    {
                        @Html.HiddenFor(m => m.AchievedProcurementID)
                    <div class="row">
                        <div class="col-lg-4">
                            <label for="sel1">Select Project </label>
                            @Html.DropDownListFor(m => m.Project_ID, new SelectList(Model.comboProjects, "ProjectID", "ProjectName"), new { @class = "select2 form-control ", @placeholder = "Select Project Type" })
                            @Html.ValidationMessageFor(m => m.Project_ID, "", new { @class = "parsley-required" })
                        </div>
                        @*<div class="col-lg-4">
            <label for="sel1">Select Sub Project</label>
            @Html.DropDownListFor(m => m.SubProject_ID, new SelectList(Model.comboSubProjects, "SubProjectID", "SubProjectName"), new { @class = "select2 form-control " })
            @Html.ValidationMessageFor(m => m.SubProject_ID, "", new { @class = "parsley-required" })
        </div>*@
                        <div class="col-lg-4">
                            <label>Select Cycle/Batch</label>
                            @Html.DropDownListFor(m => m.Batch_ID, new SelectList(Model.comboBatch, "BatchID", "BatchName"), new { @class = " form-control" })
                            @Html.ValidationMessageFor(m => m.Batch_ID, "", new { @class = "parsley-required" })
                        </div>
                        <div class="col-lg-4">
                            <label class="col-form-label">Headers</label>
                            @Html.TextBoxFor(model => model.ProcurementHeader, new { @class = "form-control", @type = "text", @placeholder = "Enter Procurement Headers" })
                            @Html.ValidationMessageFor(m => m.ProcurementHeader, "", new { @class = "parsley-required", @id = "spanHeaders" })
                        </div>
                    </div>
                        
                        <div class="row">
                            <div class="col-lg-4">
                                <label>No of Procurement *</label>
                                <label class="col-form-label parsley-required" id="lblNoOfProcurement"></label>
                                <input hidden id="RemaningNoOfProcurement" type="number" name="RemaningNoOfProcurement" />
                                @Html.TextBoxFor(model => model.AchievedProcurement, new { @class = "form-control", @type = "number", @placeholder = "Enter No of Procurement" })
                                @Html.ValidationMessageFor(m => m.AchievedProcurement, "", new { @class = "parsley-required", @id = "spanNoOfProcurement" })

                            </div>
                            <div class="col-lg-4">
                                <label class="col-form-label">Procurement From Date *</label>
                                <input type="text" data-provide="datepicker" class="form-control date-Future datepicker" name="ProcurementFromDate" id="ProcurementFromDate" value="@Model.ProcurementFromDate.ToShortDateString()">
                                @Html.ValidationMessageFor(m => m.ProcurementFromDate, "", new { @class = "parsley-required", @id = "spanProcurementFromDate" })

                            </div>
                            <div class="col-lg-4">
                                <label class="col-form-label">Procurement To Date *</label>
                                <input type="text" data-provide="datepicker" class="form-control date-Future datepicker" name="ProcurementToDate" id="ProcurementToDate" value="@Model.ProcurementToDate.ToShortDateString()">
                                @Html.ValidationMessageFor(m => m.ProcurementToDate, "", htmlAttributes: new { @class = "parsley-required", @id = "spanProcurementFromDate" })
                            </div>
                            <div class="col-lg-4">
                                <label class="col-form-label">Remarks *</label>
                                @Html.TextBoxFor(model => model.Remarks, new { @class = "form-control", @placeholder = "Remarks Optional" })
                                @Html.ValidationMessageFor(m => m.Remarks, "", new { @class = "parsley-required" })

                            </div>
                        </div>

                        <br />
                        <div class="required">* Required fields</div>
                        <!--Popup Msg-->

                        @*if (TempData["Message"] != null)
                            {
                                <div id="divMessage" class="alert alert-success d-inline-flex" role="alert">
                                    <strong>@TempData["Message"]</strong>
                                </div>
                            }*@
                        <hr />
                        <div class="float-right">
                            <button class="btn btn-primary" type="submit">Update</button>
                        </div>
                        <br />
                    }
                </div>
            </div>
        </div>
        <!-- END card-->
    </div>
</div>

@section Scripts{
    <script>
        $(document).ready(function ()
        {
            $('.datepicker').datepicker();
        });

        $("#ProcurementFromDate").on('change', function () {
            debugger
            DateCompare();
        });

        $("#ProcurementToDate").on('change', function () {
            debugger
            DateCompare();
        });

        function DateCompare() {
            var _ProcurementToDate = $('#ProcurementToDate').val();

            var _ProcurementFromDate = $('#ProcurementFromDate').val();
            if (_ProcurementToDate != '') {
                if (_ProcurementFromDate > _ProcurementToDate)
                {

                    $("#spanProcurementFromDate").text("From-Date should not be greater then  To-Date")
                    return false;
                }
                else
                {
                    $("#spanRecruitedFromHRDate").text("")
                    return false;
                }
            }
        }

           $("#Project_ID").on('change', function () {
                var _Project_ID = $(this).find("option:selected").val();
                $.ajax({
                     type: 'POST',
                     url: '@Url.Action("ProjectCheckUmbrella", "Common")',
                     dataType: 'json',
                    data: { ProjectID: _Project_ID },  // Same Parameter with Action
                    success: function (Value) {
                        debugger;

                        var remainValue = Value[3] - Value[4] ;
                        $("#RemaningNoOfProcurement").val(remainValue); //Hidden
                        $("#lblNoOfProcurement").text(remainValue);
                        $("#lblNoOfProcurement").show();

                                      $.ajax({
                                      //url: "/ManageStock/GetProductNameCombo" + Category_ID,
                                       type: 'POST',
                                       url: '@Url.Action("ClickProjectCombo", "Common")',
                                       dataType: 'json',
                                       data: { Project_ID: _Project_ID },  // Same Parameter with Action
                                       success: function (response)
                                       {
                                           debugger;
                                           if (response.comboBatches.length <= 1) {
                                               $("#SubProject_ID").prop("disabled", true);
                                               $("#Batch_ID").prop("disabled", true);
                                               $("#Batch_ID").append('<option value="' + 0 + '">' +
                                                   "Please Select Batch" + '</option>');
                                           }
                                           else
                                           {
                                               $("#SubProject_ID").prop("disabled", false);$("#Batch_ID").prop("disabled", false);
                                               $("#SubProject_ID").empty(); $("#Batch_ID").empty();
                                               $.each(response.comboBatches, function (i, item)
                                               {
                                                   $("#Batch_ID").append('<option value="' + item.BatchID + '">' +
                                                       item.BatchName + '</option>');
                                               });
                                           }
                                        },
                                        error: function (ex)
                                        {
                                           alert('Failed to Retrieve Batch Data:  ' + ex);
                                        }
                                  });

                 },
                 error: function (ex) {
                     console.log('Failed to Retrieve Project Data:  ' + ex);
                 }
                });//Ajax_End
            });

        $("#SubProject_ID").on('change', function () {
            var _SubProject_ID = $(this).find("option:selected").val();

                $.ajax({
                     type: 'POST',
                     url: '@Url.Action("ClickSubProjectCombo", "Common")',
                     dataType: 'json',
                    data: { SubProject_ID: _SubProject_ID },  // Same Parameter with Action
                    success: function (BatchLst) {
                        debugger;
                        $("#Batch_ID").empty();
                        if (BatchLst == 0) {
                            $("#Batch_ID").prop("disabled", true);
                            $("#Batch_ID").append('<option value="' + 0 + '">' +
                                "Please Select Batch" + '</option>');
                        } else {
                            $("#Batch_ID").prop("disabled", false);
                            $.each(BatchLst, function (i, Aqib) {
                                $("#Batch_ID").append('<option value="' + Aqib.BatchID + '">' +
                                    Aqib.BatchName + '</option>');
                            });
                        }
                 },
                 error: function (ex) {
                     console.log('Failed to Retrieve Batch Data:  ' + ex);
                 }
                });//Ajax_End
        });

        $("#NoOfProcurement").on('change', function () {
            CheckHRRemaningValue();
        });

        function CheckHRRemaningValue() {
            debugger;
            var _NoOfProcurement = $("#AchievedProcurement").val();
            var _RemaningNoOfProcurement = $("#lblNoOfProcurement").text();
            if (parseInt(_RecruitedHR) > parseInt(_RemaningRecruitedHR)) {
                $("#spanNoOfProcurement").text("Achived Procurement should not be greater than Planned Procurement");
                $("#spanNoOfProcurement").show();
                $("#NoOfProcurement").focus();
                return true;
            } else {
                $("#spanNoOfProcurement").text("");
                $("#spanNoOfProcurement").hide();
                return true;
            }
        }
    </script>
}