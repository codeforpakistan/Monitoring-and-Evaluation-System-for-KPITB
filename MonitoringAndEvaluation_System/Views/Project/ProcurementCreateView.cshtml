@model ModelLayer.MainViewModel.CreateProcurementVM
@{
    ViewBag.Title = "Add New HR";
    List<ModelLayer.MainViewModel.GetAllProcurementVM> _LstAllProcurement = (List<ModelLayer.MainViewModel.GetAllProcurementVM>)ViewBag.LstAllProcurement;
}

<!-- START row-->
<div class="row">
    <div class="col-xl-12">

        <!-- START card-->
        <div class="card card-default">
            <div class="card-header">
                <div class="card-title">
                    <h4>Add New Procurement</h4>
                </div>

            </div>
            <div class="card-body">
                <!--Foum-->
                @using (Html.BeginForm("ProcurementCreateView", "Project", FormMethod.Post, new { @class = "form-horizontal" }))
                {
                    <div class="form-group">

                        <div class="row">
                            <div class="col-lg-4">
                                <label for="sel1">Select Project </label>
                                @Html.DropDownListFor(m => m.Project_ID, new SelectList(Model.comboProjects, "ProjectID", "ProjectName"), new { @class = "select2 form-control ", @placeholder = "Select Project Type" })
                                @Html.ValidationMessageFor(m => m.Project_ID, "", new { @class = "parsley-required" })
                            </div>
                            @*<div class="col-lg-4">
                                   <label for="sel1">Select Sub Project</label>
                                   @Html.DropDownListFor(m => m.SubProject_ID, new SelectList(Model.comboSubProjects, "SubProjectID", "SubProjectName"), new { @class = "select2 form-control " })
                                   @Html.ValidationMessageFor(m => m.SubProject_ID, "", new { @class = "parsley-required" })
                                </div>*@

                            <div class="col-lg-4">
                                <label>Select Cycle/Batch</label>
                                @Html.DropDownListFor(m => m.Batch_ID, new SelectList(Model.comboBatch, "BatchID", "BatchName"), new { @class = " form-control" })
                                @Html.ValidationMessageFor(m => m.Batch_ID, "", new { @class = "parsley-required" })
                            </div>

                            <div class="col-lg-4">
                                <label class="col-form-label">No of Procurement *</label>
                                <label class="col-form-label parsley-required" id="lblNoOfProcurement"></label>
                                <input hidden id="RemaningNoOfProcurement" type="number" name="RemaningNoOfProcurement" />
                                @Html.TextBoxFor(model => model.NoOfProcurement, new { @class = "form-control", @type = "number", @placeholder = "Enter No of Procurement" })
                                @Html.ValidationMessageFor(m => m.NoOfProcurement, "", new { @class = "parsley-required", @id = "spanNoOfProcurement" })
                            </div>

                        </div>
                        <div class="row">
                            <div class="col-lg-12">
                                <label class="col-form-label">Headers</label>
                                @Html.TextBoxFor(model => model.ProcurementHeader, new { @class = "form-control", @type = "text", @placeholder = "Enter No of Headers" })
                                @Html.ValidationMessageFor(m => m.ProcurementHeader, "", new { @class = "parsley-required", @id = "spanHeaders" })
                            </div>
                        </div>
                        <div class="row">

                            <div class="col-lg-6">
                                <label class="col-form-label">Procurement From Date *</label>
                                @Html.TextBoxFor(model => model.ProcurementFromDate, new { @class = "form-control", @type = "date", @id = "ProcurementFromDate", @placeholder = "Enter No of Recruited -HR" })
                                @Html.ValidationMessageFor(m => m.ProcurementFromDate, "", new { @class = "parsley-required", @id = "spanProcurementFromDate" })
                            </div>
                            <div class="col-lg-6">
                                <label class="col-form-label">Procurement To Date *</label>
                                @Html.TextBoxFor(model => model.ProcurementToDate, new { @class = "form-control", @type = "date", @id = "ProcurementToDate", @placeholder = "Enter No of Recruited -HR" })
                                @Html.ValidationMessageFor(m => m.ProcurementToDate, "", new { @class = "parsley-required", @id = "spanProcurementFromDate" })
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-lg-12">
                                <label class="col-form-label">Remarks </label>
                                @Html.TextBoxFor(model => model.Remarks, new { @class = "form-control", @placeholder = "Remarks Optional" })
                                @Html.ValidationMessageFor(m => m.Remarks, "", new { @class = "parsley-required" })
                            </div>
                        </div>
                        <br />
                        <div class="required">* Required fields</div>
                        <hr />
                        <div class="float-right">
                            <button class="btn btn-primary" type="submit">Save</button>
                        </div>
                        <br />
                        <br />
                    </div>
                }
                <!--Table-->
                <div class="card card-default">
                    <div class="row">
                        <div class="col-lg-12">
                            <div class="card">
                                <div class="card-body">
                                    <table class="table table-striped my-4 w-100 table-responsive table-hover" id="datatable2">
                                        <thead>
                                            <tr>

                                                <th>
                                                    ID
                                                </th>

                                                <th class="col-lg-3">
                                                    Achieved Procurement
                                                </th>
                                                <th class="col-lg-3">
                                                    Date
                                                </th>
                                                <th class="col-lg-5">
                                                    Remarks
                                                </th>
                                                <th>
                                                    Action
                                                </th>
                                            </tr>                        @*a*@
                                        </thead>
                                        <tbody>
                                            @{
                                                foreach (var item in _LstAllProcurement)
                                                {
                                                    <tr>
                                                        @Html.HiddenFor(m => item.AchievedProcurementID)
                                                        <td>
                                                            @item.ID
                                                        </td>

                                                        <td>
                                                            @item.AchievedProcurement
                                                        </td>

                                                        <td>
                                                            @item.ProcurementFromDate.ToShortDateString()
                                                        </td>
                                                        <td>
                                                            @item.Remarks
                                                        </td>
                                                        <td>
                                                            @Html.ActionLink("Edit", "ProcurementEdit", new { AchievedProcurementID = item.AchievedProcurementID }, new { @class = "mb-1 btn btn-warning" })
                                                        </td>
                                                    </tr>
                                                }
                                            }

                                        </tbody>
                                    </table>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            }
        </div>
        <!-- END card-->

    </div>
</div>
@section Styles{
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-datepicker/1.6.4/css/bootstrap-datepicker.css" type="text/css" />
}
@section Scripts{
    <script>
        $(document).ready(function ()
        {

        });

        $("#ProcurementFromDate").on('change', function () {
            debugger
            DateCompare();
        });
        $("#ProcurementToDate").on('change', function () {
            debugger
            DateCompare();
        });
        function DateCompare() {
            var _ProcurementFromHRDate = $('#ProcurementFromDate').val();
            var _ProcurementToHRDate = $('#ProcurementToDate').val();

            if (_ProcurementToHRDate != '') {
                if (_ProcurementFromHRDate > _ProcurementToHRDate)
                {

                    $("#spanProcurementFromDate").text("To-Date should not be greater then From-Date")
                    return false;
                }
                else
                {
                    $("#spanProcurementFromDate").text("")
                    return false;
                }
            }
        }
        $("#Project_ID").on('change', function () {
                var _Project_ID = $(this).find("option:selected").val();
                $.ajax({
                     type: 'POST',
                     url: '@Url.Action("ProjectCheckUmbrella")',
                     dataType: 'json',
                    data: { ProjectID: _Project_ID },  // Same Parameter with Action
                    success: function (Value) {
                        debugger;
                        var remainValue = Value[3] - Value[4];
                        $("#RemaningNoOfProcurement").val(remainValue); //Hidden
                        $("#lblNoOfProcurement").text(remainValue);
                        $("#lblNoOfProcurement").show();

                                      $.ajax({
                                       type: 'POST',
                                       url: '@Url.Action("ClickProjectComboBox")',
                                       dataType: 'json',
                                       data: { Project_ID: _Project_ID },  // Same Parameter with Action
                                          success: function (response2) {
                                              debugger;
                                           
                                              if (response2.comboBatches.length <= 1 || response2.comboBatches == null) {
                                                  $("#SubProject_ID").prop("disabled", true);
                                                  $("#Batch_ID").prop("disabled", true);
                                                  $("#Batch_ID").append('<option value="' + 0 + '">' +
                                                      "Please Select Batch" + '</option>');
                                              }
                                              else {
                                                  $("#Batch_ID").prop("disabled", false);
                                                  $("#Batch_ID").empty();
                                                  $.each(response2.comboBatches, function (i, item2) {
                                                      $("#Batch_ID").append('<option value="' + item2.BatchID + '">' +
                                                          item2.BatchName + '</option>');
                                                  });
                                              }
                                              },
                                              error: function (ex) {
                                                  alert('Failed to Retrieve Batch Data:  ' + ex);
                                              }
                                  });
                 },
                 error: function (ex) {
                     console.log('Failed to RetrieveProject Data:  ' + ex);
                 }
                });//Ajax_End
            });

        $("#NoOfProcurement").on('change', function () {
            CheckProcurementRemaningValue();
        });

        $("#SubProject_ID").on('change', function () {
            var _SubProject_ID = $(this).find("option:selected").val();

                $.ajax({
                     type: 'POST',
                     url: '@Url.Action("ClickSubProjectCombo")',
                     dataType: 'json',
                    data: { SubProject_ID: _SubProject_ID },  // Same Parameter with Action
                    success: function (BatchLst) {
                        debugger;
                        $("#Batch_ID").empty();
                        if (BatchLst == 0) {
                            $("#Batch_ID").prop("disabled", true);
                            $("#Batch_ID").append('<option value="' + 0 + '">' +
                                "Please Select Batch" + '</option>');
                        } else {
                            $("#Batch_ID").prop("disabled", false);
                            $.each(BatchLst, function (i, Aqib) {
                                $("#Batch_ID").append('<option value="' + Aqib.BatchID + '">' +
                                    Aqib.BatchName + '</option>');
                            });
                        }
                 },
                 error: function (ex) {
                     console.log('Failed to Retrieve Batch Data:  ' + ex);
                 }
                });//Ajax_End
        });

        function CheckProcurementRemaningValue() {
            debugger;
            var _Procurement = $("#NoOfProcurement").val();
            var _RemaningProcurement = $("#lblNoOfProcurement").text();
            if (parseInt(_Procurement) > parseInt(_RemaningProcurement)) {
                $("#spanNoOfProcurement").text("Procurement should not be greater than AchivedProcurement");
                $("#spanNoOfProcurement").show();
                $("#NoOfProcurement").focus();
                return true;
            } else {
                $("#spanNoOfProcurement").text("");
                $("#spanNoOfProcurement").hide();
                return true;
            }
        }

    </script>
}

