@model ModelLayer.MainViewModel.CreateRecruitedHRVM
@{
    ViewBag.Title = "Add New HR";
    List<ModelLayer.MainViewModel.GetAllRecruitedHRVM> _LstAllRecruitedHR = (List<ModelLayer.MainViewModel.GetAllRecruitedHRVM>)ViewBag.LstAllRecruitedHR;
}

<!-- START row-->
<div class="row">
    <div class="col-xl-12">
        @using (Html.BeginForm("RecruitedHRCreate", "Project", FormMethod.Post, new {  @class = "form-horizontal" }))
        {
            <!-- START card-->
            <div class="card card-default">
                <div class="card-header mt-3">
                    <h4>Add New Recruited-HR</h4>
                </div>
                <div class="card-body">
                    <div class="form-group">
                        <div class="row">
                            <div class="col-lg-4">
                                <label for="sel1">Select Project </label>
                                @Html.DropDownListFor(m => m.Project_ID, new SelectList(Model.comboProjects, "ProjectID", "ProjectName"), new { @class = "select2 form-control " })
                                @Html.ValidationMessageFor(m => m.Project_ID, "", new { @class = "parsley-required" })
                            </div>
                            @*<div class="col-lg-4">
            <label>Select Sub Project</label>
            @Html.DropDownListFor(m => m.SubProject_ID, new SelectList(Model.comboSubProjects, "SubProjectID", "SubProjectName"), new { @class = "select2 form-control " })
            @Html.ValidationMessageFor(m => m.SubProject_ID, "", new { @class = "parsley-required" })
        </div>*@
                            <div class="col-lg-4">
                                <label>Select Cycle/Batch</label>
                                @Html.DropDownListFor(m => m.Batch_ID, new SelectList(Model.comboBatch, "BatchID", "BatchName"), new { @class = " form-control" })
                                @Html.ValidationMessageFor(m => m.Batch_ID, "", new { @class = "parsley-required" })
                            </div>
                            <div class="col-lg-4">
                                <label class="col-form-label">No of Recruited -HR *</label>
                                <label class="col-form-label parsley-required" id="lblRemaningHR"></label>
                                <input hidden id="RemaningRecruitedHR" type="number" name="RemaningRecruitedHR" />
                                @Html.TextBoxFor(model => model.RecruitedHR, new { @class = "form-control", @type = "number", @placeholder = "Enter No of Recruited -HR" })
                                @Html.ValidationMessageFor(m => m.RecruitedHR, "", new { @class = "parsley-required", @id = "spanRecruitedHR" })
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-lg-6">
                                <label class="col-form-label">From HR Date *</label>
                                @Html.TextBoxFor(model => model.RecruitedFromHRDate, new { @class = "form-control", @type = "date" })
                                @Html.ValidationMessageFor(m => m.RecruitedFromHRDate, "", new { @class = "parsley-required", @id = "spanRecruitedFromHRDate" })
                            </div>
                            <div class="col-lg-6">
                                <label class="col-form-label">To HR Date *</label>
                                @Html.TextBoxFor(model => model.RecruitedToHRDate, new { @class = "form-control", @type = "date" })
                                @Html.ValidationMessageFor(m => m.RecruitedToHRDate, "", new { @class = "parsley-required", @id = "spanRecruitedToHRDate" })
                            </div>
                            <div class="col-lg-12">
                                <label class="col-form-label">Remarks </label>
                                @Html.TextBoxFor(model => model.Remarks, new { @class = "form-control", @placeholder = "Remarks Optional" })
                                @Html.ValidationMessageFor(m => m.Remarks, "", new { @class = "parsley-required" })
                        @*a*@
                            </div>
                        </div>

                        <br />

                        <div class="required">* Required fields</div>
                        <hr />
                        <div class="float-right">
                            <button class="btn btn-primary" type="submit">Save</button>
                        </div>
                        <br />
                        <br />
                        <div class="card card-default mt-5">
                            <div class="row">
                                <div class="col-lg-12">
                                    <div class="card">
                                        <div class="card-body">
                                            <table class="table table-striped my-4 w-100  table-hover" id="datatable2">
                                                <thead>
                                                    <tr>

                                                        <th>
                                                            ID
                                                        </th>

                                                        <th>
                                                            Recruited-HR
                                                        </th>
                                                        <th>
                                                            Recruited Date
                                                        </th>
                                                        <th class="col-lg-4">
                                                            Remarks
                                                        </th>
                                                        <th>
                                                            Action
                                                        </th>
                                                    </tr>
                                                </thead>
                                                <tbody>
                                                    @{
                                                        foreach (var item in _LstAllRecruitedHR)
                                                        {
                                                            <tr>
                                                                @Html.HiddenFor(m => item.RecruitedHRID)
                                                                <td>
                                                                    @item.ID
                                                                </td>

                                                                <td>
                                                                    @item.RecruitedHR
                                                                </td>

                                                                <td>
                                                                    @item.RecruitedFromHRDate.ToShortDateString()
                                                                </td>
                                                                <td>
                                                                    @item.Remarks
                                                                </td>
                                                                <td>
                                                                    @Html.ActionLink("Edit", "RecruitedHREdit", new { RecruitedHRID = item.RecruitedHRID }, new { @class = "mb-1 btn btn-warning" })
                                                                </td>
                                                            </tr>
                                                        }
                                                    }

                                                </tbody>
                                            </table>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                    </div>

                </div>
            </div>
            <!-- END card-->

        }
    </div>
</div>

@section Scripts{
    <script>
        $(document).ready(function ()
        {
            $("#SubProject_ID").prop("disabled", false);
            $("#Batch_ID").prop("disabled", true);
        });

        $("#RecruitedFromHRDate").on('change', function () {
            debugger
            DateCompare();
        });

        $("#RecruitedToHRDate").on('change', function () {
            debugger
            DateCompare();
        });

        function DateCompare() {
            var _RecruitedToHRDate = $('#RecruitedToHRDate').val();

            var _RecruitedFromHRDate = $('#RecruitedFromHRDate').val();
            if (_RecruitedToHRDate != '') {
                if (_RecruitedFromHRDate > _RecruitedToHRDate)
                {
                    $("#spanRecruitedFromHRDate").text("From-HRDate should not be greater then  To-HRDate");
                    return false;
                }
                else
                {
                    $("#spanRecruitedFromHRDate").text("");
                    return false;
                }
            }
        }

        @*$("#Project_ID").on('change', function () {
            var _Project_ID = $(this).find("option:selected").val();

                $.ajax({
                     type: 'POST',
                     url: '@Url.Action("ClickProjectComboBox", "Project")',
                     dataType: 'json',
                    data: { Project_ID: _Project_ID },  // Same Parameter with Action
                    success: function (BatchLst) {
                        debugger;
                        $("#Batch_ID").empty();
                        if (BatchLst == 0 || BatchLst ==null) {
                            $("#Batch_ID").prop("disabled", true);
                            $("#Batch_ID").append('<option value="' + 0 + '">' +
                                "Please Select Batch" + '</option>');
                        } else {
                            $("#Batch_ID").prop("disabled", false);
                            $.each(BatchLst, function (i, Aqib) {
                                $("#Batch_ID").append('<option value="' + Aqib.BatchID + '">' +
                                    Aqib.BatchName + '</option>');
                            });
                        }
                 },
                 error: function (ex) {
                     console.log('Failed to Retrieve Batch Data:  ' + ex);
                 }
                });//Ajax_End
        });*@
       

        $("#Project_ID").on('change', function () {
                var _Project_ID = $(this).find("option:selected").val();
                $.ajax({
                     type: 'POST',
                     url: '@Url.Action("ProjectCheckUmbrella")',
                     dataType: 'json',
                    data: { ProjectID: _Project_ID },  // Same Parameter with Action
                    success: function (Value) {
                        debugger;
                       
                        var remainValue = Value[1] - Value[2] ;
                        $("#RemaningRecruitedHR").val(remainValue); //Hidden
                        $("#lblRemaningHR").text(remainValue);
                        $("#lblRemaningHR").show();
                      
                                      $.ajax({
                                      //url: "/ManageStock/GetProductNameCombo" + Category_ID,
                                       type: 'POST',
                                       url: '@Url.Action("ClickProjectComboBox")',
                                       dataType: 'json',
                                       data: { Project_ID: _Project_ID },  // Same Parameter with Action
                                       success: function (response)
                                       {
                                           debugger;
                                           if (response.comboBatches.length <= 1) {
                                               $("#SubProject_ID").prop("disabled", true);
                                               $("#Batch_ID").prop("disabled", true);
                                               $("#Batch_ID").append('<option value="' + 0 + '">' +
                                                   "Please Select Batch" + '</option>');
                                           }
                                           else
                                           {
                                               $("#SubProject_ID").prop("disabled", false);$("#Batch_ID").prop("disabled", false);
                                               $("#SubProject_ID").empty(); $("#Batch_ID").empty();
                                               $.each(response.comboBatches, function (i, item)
                                               {
                                                   $("#Batch_ID").append('<option value="' + item.BatchID + '">' +
                                                       item.BatchName + '</option>');
                                               });
                                           }
                                        },
                                        error: function (ex)
                                        {
                                           alert('Failed to Retrieve Batch Data:  ' + ex);
                                        }
                                  });
                       
                 },
                 error: function (ex) {
                     console.log('Failed to Retrieve Project Data:  ' + ex);
                 }
                });//Ajax_End
            });

        $("#SubProject_ID").on('change', function () {
            var _SubProject_ID = $(this).find("option:selected").val();

                $.ajax({
                     type: 'POST',
                     url: '@Url.Action("ClickSubProjectCombo")',
                     dataType: 'json',
                    data: { SubProject_ID: _SubProject_ID },  // Same Parameter with Action
                    success: function (BatchLst) {
                        debugger;
                        $("#Batch_ID").empty();
                        if (BatchLst == 0) {
                            $("#Batch_ID").prop("disabled", true);
                            $("#Batch_ID").append('<option value="' + 0 + '">' +
                                "Please Select Batch" + '</option>');
                        } else {
                            $("#Batch_ID").prop("disabled", false);
                            $.each(BatchLst, function (i, Aqib) {
                                $("#Batch_ID").append('<option value="' + Aqib.BatchID + '">' +
                                    Aqib.BatchName + '</option>');
                            });
                        }
                 },
                 error: function (ex) {
                     console.log('Failed to Retrieve Batch Data:  ' + ex);
                 }
                });//Ajax_End
        });

        $("#RecruitedHR").on('change', function () {
            CheckHRRemaningValue();
        });          

        function CheckHRRemaningValue() {
            debugger;
            var _RecruitedHR = $("#RecruitedHR").val();
            var _RemaningRecruitedHR = $("#lblRemaningHR").text();
            if (parseInt(_RecruitedHR) > parseInt(_RemaningRecruitedHR)) {
                $("#spanRecruitedHR").text("RecruitedHR should not be greater than Planned-HR");
                $("#spanRecruitedHR").show();
                $("#RecruitedHR").focus();
                return true;
            } else {
                $("#spanRecruitedHR").text("");
                $("#spanRecruitedHR").hide();
                return true;
            }
        }
    </script>
}



